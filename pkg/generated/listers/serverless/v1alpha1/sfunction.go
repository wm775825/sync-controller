/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/wm775825/sync-controller/pkg/apis/serverless/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SfunctionLister helps list Sfunctions.
type SfunctionLister interface {
	// List lists all Sfunctions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Sfunction, err error)
	// Sfunctions returns an object that can list and get Sfunctions.
	Sfunctions(namespace string) SfunctionNamespaceLister
	SfunctionListerExpansion
}

// sfunctionLister implements the SfunctionLister interface.
type sfunctionLister struct {
	indexer cache.Indexer
}

// NewSfunctionLister returns a new SfunctionLister.
func NewSfunctionLister(indexer cache.Indexer) SfunctionLister {
	return &sfunctionLister{indexer: indexer}
}

// List lists all Sfunctions in the indexer.
func (s *sfunctionLister) List(selector labels.Selector) (ret []*v1alpha1.Sfunction, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sfunction))
	})
	return ret, err
}

// Sfunctions returns an object that can list and get Sfunctions.
func (s *sfunctionLister) Sfunctions(namespace string) SfunctionNamespaceLister {
	return sfunctionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SfunctionNamespaceLister helps list and get Sfunctions.
type SfunctionNamespaceLister interface {
	// List lists all Sfunctions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Sfunction, err error)
	// Get retrieves the Sfunction from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Sfunction, error)
	SfunctionNamespaceListerExpansion
}

// sfunctionNamespaceLister implements the SfunctionNamespaceLister
// interface.
type sfunctionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Sfunctions in the indexer for a given namespace.
func (s sfunctionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Sfunction, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Sfunction))
	})
	return ret, err
}

// Get retrieves the Sfunction from the indexer for a given namespace and name.
func (s sfunctionNamespaceLister) Get(name string) (*v1alpha1.Sfunction, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sfunction"), name)
	}
	return obj.(*v1alpha1.Sfunction), nil
}
